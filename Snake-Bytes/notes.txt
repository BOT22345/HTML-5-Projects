step-1 create basic setup 
step-2 add assets 
step-3 
    - create one main div(main-container) and three div inside (main-container) div named (scoreBox, maxScoreBox, board) with (scoreBox) having the current score = 0 and (maxScoreBox) having max score which will be stored in local storage of the user 
    - HTML part done here 

step-4 import font of your choice for score board and set universal padding and margin  to 0

step-5 create css for class main-container and board 
    main-container : background as image ,height and width, display will be flex,  justify-content will be center
    board: add background as linear graident, height and width and border, display as grid, template rows as grid-template-rows: repeat(18,1fr), same way for columns ** remeber first is number of so it will be 18 not 18fr 

step-6 divide the whole js into three sections variable, functions and main-logic-section using comments and create 4 sound variables and one variable for object having x property with value 0 and y property as value 0
    inputDir
    foodSound 
    gameOverSound
    moveSound
    musicSound

step-7 now we use the window.requestAnimationFrame(takesCallbackFunction)
    in function section we first create one then call it main by passing this
    function as callback function to requestAnimationFrame and we call that function
    in it again so that it is being called recurssively 
    function main(ctime){ function creation
    window.requestAnimationFrame(main); recurssively calling itself
    }   
    window.requestAnimationFrame(main); calling main function for first time

step-8 now use this formula to control the frame  rates or speed of the game 
    create two varaibles lastPaintTime=0 to update the variable in accordance with c time and speed to control the speed=2 of the game 
    if((ctime-lastPaintTime)/1000<1/speed){return;}else{gameEngine();}
    lastPaintTime=ctime; // to keep our loop running recurssively
    for example ctime=100 and intially last time =0 we will get 0.1which is less 1/2 0.5 so it is gonna get return and won't re paint but once c time increases to 501 it will give 0.51 something so it is gonna enter the else part and call the game engine and later gonna update lastPaintTime to cTime so our loop keeps on running and gameEngine is called consistently after some time 

Step-9 creat a gameEngine(){} function after this main function and divide it into two sections using comment part 1 update snake array and food and part 2 display snake array ana food and create a variable array snakeArr and having a one object in that array as propert x and y showing initial position of snake 

Step-10 now we try to display our snake 
    first get the board from html using querySelector let board = document.querySelector(".board");
    now first make the boardinnerHtml to empty string so that we can later fill it with snake board.innerHTML="";
    now we put a for loop on our snakeArray snakeArr.forEach((e,index)=>{e is the elementlike {x:10,y:13},{x:11,y:13}}.. and so on while the index is the number of elemtent in that array)
    now we create an particular element or div which we will append later on the board    snakeElement=document.createElement('div');
    now we set the position of the div using the Snakearray snake Element.style.gridRowStart=e.y; snakeElement.style.gridColumnStart=e.x;
    now we will add one css to this element and set its css in css file snakeElement.classList.add('food'); and in css file .food{ background-color: red;}
    now we append this to the board array board.appendChild(snakeElement);

Step-11 now we will try to display the food using same concept and create the seperate classes for the snake head and snake body 
    first create a copy of inside 5 lines of earlier for each loop on snakeArr to display a single food 
    now change the snakeElement to foodElement
    now create a object names foodElement and add values of x and y property Note that it is a object not array 
    create the css class in css file and add background color 
    now create a seperate class for snakebody and snake head with different colors 
    now for the logic of head to be different body put a if loop if index===0 put this head class using classList.add or else the snakeBody class will be added 
    remeber to keep the food and foodElement different names or else issue will occur 

Step-12 now create one keydown event listener on the window obejct and inside it 
    creat one inputDir object with x:0 and y:0
    also make movement sound play using moveSound.play();
    now use the e.key to get the key pressed by the user and check using switch condition and print on console for testing purpose 
    switch(e.key){case "ArrowUp":}

Step-13 now set the value of inputDir object in switch cases, like for ArrowUp case and ArrowDown case x will remain 0 but will y will be -1 and 1 respectively and same arrow right and left y remain 0 and x will be -1 and 1 respectively

Step-14 now we write the logic for food connecting with snake head and updating snake and moving food to random location 
    first we write the logic for increasing the snakebody size 
    if snakeArr.x value === food.x value and same way for snakeArr.y 
    snakeArr.unshift({x:snakeArr[0]+inputDir.x,y:snakeArr[0].y+inputDir.y }); this will update the snake body 
    now for the food random location we use the math.random and math.round for integer value as math.random give float value 
    let a=1
    let b=18
    food={x:Math.round(a+(b-a)*Math.random()),y:Math.round(a+(b-a)*Math.random())} here a is highest value of our grid and b is lowest value of our grid so our value will be generated between a and b 

Step-15 now we will write the logic for snake movement 
    now after the snake display we will start a decrementing for loop starting from legnth of array -2 going till 0 
    for(let i=snakeArr.legnth;i>=0;i--)
    and inside this loop we will just shift every object to its next position snakeArr[i+1]={...snakeArr[i]}, we are using spread operator, cause a variable pointing to the object only holds the reference to that value not the actual value inside, so assiging it straight to another will only pass the reference not the actual value inside the object, so we are using spread operator to get the actual value inside the object and then assign it to the next position of the array but the last position that is at index 0 will be having an issue so we have to treat it spreately 
    snakeArr[0].x=snakeArr[0].x+inputDir.x;
    snakeArr[0].y=snakeArr[0].y+inputDir.y;

Step-16 now we are gonna write the logic for colliding of snake 
    first we write the logic if we call the isCollide function what will happen and then later write the inside logic of that isCollide function which is gonna return true if collided
    if(isCollide(snakeArr)){} the isCollide function is gonna get passed one array i.e., snake array 
    inside these curly bracket first we stop the music sound
    now we set inputDirection object to x:0 and y:0 and set an alert gameover 
    also reset the score to 0 and make snakeArr array object to again holding only one object snakeArr=[{x:15,y:3}]

Step-17 now we will write the logic inside the isCollide function 
    first for if snake bumps into itself 
    we will gonna write function definition below this ifCollide calling
    inside this fucntion we will start the loop from 1 to snakeArr.length cause 0 will be and we need to check 0th element with all other elements 
    for(let i=1;i<snakeArr.length;i++){}
    now insde this for loop we will check if coordinates of 0th elemtent x and y both matches with snakeArr element at same time, if they does we will return true 
    if(snakeArr[0].x===snakeArr[i].x && snakeArr[0].y===snakeArr[i].y){gameOverSound.play(); return true}, and before returning true we will also play the gameoversound cause in calling if playing the gameover sound it is playing after the alert message 
    
    now for if snake bumb to border 
    now outside this for loop cause we only need to check this once not like again and again like head with body 
    we will start one if loop and inside it we are gonna check if head is between 18-0 which is our border
    if(snake[0].x>18 || snake[0].x<0  || snake[0].y>18 || snake[0].y<0){return true;} we are only using or operator cause if it hits with any wall it should collid

Step-18 now we write the logic for score 
    first in css we are going to set the css for the scoreBox class named div and set its position 
    now in javascript we will get the reference of the element in scoreBox in javascript file 
    now in the area we are changing the for to random location when it matches with the cord of the head, we change the inner value of the scoreBox using the template literal and also increment the score 

Step-19 logic for highest score 
    first in cess we are going to set the css for the maxScoreBox class named dive and set its position 
    now in javascript create a variable for maxScoreBox which is gonna get reference of the maxScoreBox div in html and maxScore which is gonna hold the maxScore 
    now first get the value of maxScore from the local storage by using maxScore=localStorage.getItem();
    now in the code for isCollid function in the wall coliding if or second if, write the logic if(score>maxScore){maxScore=score and set it to the local storage usig localStorage.setItem("maxScore",maxScore);}
    now in main function just change the inner html of the maxScoreBoard, we need to do outside this if block cause we wan't it to render as soon as our gameloop starts 

Step-20 setting different images for food snaek body and head 
    just in the css of the files change the background images 
--------------------------------------ALL DONE!!!!!! -------------------------
--------------------------------------REST ALL YOUR IMAGINATION --------------

